// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// ws2812 //
// ------ //

#define ws2812_wrap_target 0
#define ws2812_wrap 3

#define ws2812_T1 2
#define ws2812_T2 5
#define ws2812_T3 3

static const uint16_t ws2812_program_instructions[] = {
            //     .wrap_target
    0x6221, //  0: out    x, 1            side 0 [2] 
    0x1123, //  1: jmp    !x, 3           side 1 [1] 
    0x1400, //  2: jmp    0               side 1 [4] 
    0x0400, //  3: jmp    0               side 0 [4] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ws2812_program = {
    .instructions = ws2812_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config ws2812_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ws2812_wrap_target, offset + ws2812_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_gpio_init(pio, pin);                            // Configure the pin for use by pio
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);          // Set the PIO pin direction of 1 pin starting at 1, to out
    // Get the default configuration for this program (includes things such as .wrap and .side_set).
    // This is then modified into the configuration we want
    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);                // Set the sideset pin starting at pin (can have e.g. .side_set 3 to side set on 3 pins)
    sm_config_set_out_shift(&c, false, true, 24);       // false -> shift_to_right, true -> autopull, 24 bits for each LED information
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);     // 
    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3; // Total cycles per bit (shows nice use of .define public)
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit); // slow the SM's execution down, based on sys clock and number of cycles to achieve the correct rate
    sm_config_set_clkdiv(&c, div);                      // set the clock
    pio_sm_init(pio, sm, offset, &c);               // load the configuration and go to the address offset
    pio_sm_set_enabled(pio, sm, true);              // make it go!
}

#endif

